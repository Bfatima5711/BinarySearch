
import java.util.*;
public class Solution {
    public static boolean canWePlace(int[] stalls, int dist, int cows){
        int cntCow = 1;
        int last = stalls[0];

        for(int i=1; i<stalls.length; i++){//TC:O(n)
            if(stalls[i]-last >= dist){
                cntCow++;
                last = stalls[i];
            }
        }
        if(cntCow >= cows){
            return true;
        }
        return false;
    }
    public static int aggressiveCows(int []stalls, int k) {
        //    Approach 1: Brute Force TC:O(n^2) SC:O(1)
        Arrays.sort(stalls);
        int n = stalls.length;
        int maxLimit = stalls[n-1] - stalls[0];

        for(int i=1; i<=maxLimit; i++){//TC:O(maxLimit-1) ~= O(n)
            if(!canWePlace(stalls, i, k)){//TC:O(n)
                return i-1;
            }
        }

        return maxLimit;

        //    Approach 2: Optimal TC:O(n*logn) SC:O(1)
        Arrays.sort(stalls);
        int n = stalls.length;

        int low = 1, high =  stalls[n-1] - stalls[0]; ;

        while(low <= high){//TC: O(logn)
            int mid = (low + high) / 2;

            if(canWePlace(stalls, mid, k)){//TC: O(n)
                low = mid + 1;
            }else {
                high = mid - 1;
            }
        }
        return high;
    }
}

