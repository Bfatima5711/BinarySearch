class Solution {
    public long kthElement( int arr1[], int arr2[], int n, int m, int k) {
        
        //Approach 1: Brute Force TC: (m+n) SC:(m+n)
        
        int i=0;
        int j=0;
        
        ArrayList<Integer> ans = new ArrayList<>();
        
        while(i<n && j<m){
            if(arr1[i]<=arr2[j]){
                ans.add(arr1[i++]);
            }else{
                ans.add(arr2[j++]);
            }
        }
        
        while(i<n){
            ans.add(arr1[i++]);
        }
        while(j<m){
            ans.add(arr2[j++]);
        }
        
        return ans.get(k-1);
        
        //Approach 2: Better TC: (m+n) SC:(1)
        
        int i= 0, j = 0, cnt = 0;
        
        while(i<n && j<m){
            if(arr1[i]<=arr2[j]){
                if(cnt == k-1) return arr1[i];
                cnt++;
                i++;
            }else{
                if(cnt == k-1) return arr2[j];
                cnt++;
                j++;
            }
        }
        
        while(i<n){
            if(cnt == k-1) return arr1[i];
                cnt++;
                i++;
        }
        while(j<m){
            if(cnt == k-1) return arr2[j];
                cnt++;
                j++;
        }
        
        return 0;
    
        //Approach 3: Optimal TC: Log(min(m,n)) SC:(1)
        
        int n1 = n;
        int n2 = m;
        int N = n1 + n2;
        if(n1 > n2) return kthElement(arr2, arr1, m, n, k);
        int left = k;
        
        int low = Math.max(k-n2,0), high = Math.min(k, n1);
        
        while(low <= high){
            int mid1 = (low + high) / 2;
            int mid2 = left - mid1;
            int l1 = Integer.MIN_VALUE, l2 = Integer.MIN_VALUE;
            int r1 = Integer.MAX_VALUE, r2 = Integer.MAX_VALUE;
            
            if((mid1 - 1) >= 0) l1 = arr1[mid1 - 1];
            if((mid2 - 1) >= 0) l2 = arr2[mid2 - 1];
            if(mid1 < n1) r1 = arr1[mid1];
            if(mid2 < n2) r2 = arr2[mid2];
            
            if(l1 <= r2 && l2 <= r1){
                return Math.max(l1, l2);
            }else if(l1 > r2){
                high = mid1 - 1;
            }else{
                low = mid1 + 1;
            }
        }
        return 0;
    }
}