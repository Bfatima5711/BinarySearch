class Solution {
    public int lowerBound(int[] nums, int low, int high, int target){
        int ans = high+1;//store array length in ans variable
        while(low<=high){
            int mid = (low+high)/2;

            if(nums[mid]>=target){
                ans = mid;
                high = mid - 1; 
            }else{
                low = mid + 1;
            }
        }
        return ans;
    }

    public int upperBound(int[] nums, int low, int high, int target){
        int ans = high+1;//store array length in ans variable
        while(low<=high){
            int mid = (low+high)/2;

            if(nums[mid]>target){
                ans = mid;
                high = mid - 1; 
            }else{
                low = mid + 1;
            }
        }
        return ans;
    }
    public int[] searchRange(int[] nums, int target) {
        //Approach 1: Brute force TC: O(2n) SC:O(1) 
        int n = nums.length;
        int first = -1, last = -1;

        for(int i=0; i<n; i++){
            if(nums[i]==target){
                first = i;
                break;
            }
        }
        for(int i=n-1; i>=0; i--){
            if(nums[i]==target){
                last = i;
                break;
            }
        }
        
        // return new int[]{first,last};

        //Approach 2: Brute force TC: O(n) SC:O(1)
        int n = nums.length;
        int first = -1, last = -1;

        for(int i=0; i<n; i++){
            if(nums[i]==target){
                if(first==-1){
                    first = i;
                }

                last = i;
            }
        }
        return new int[]{first, last};

         //Approach 3: Better TC: O(2*log2n) SC:O(1) Using Binary search lower bound and upperbound concept

        int n = nums.length;
        if(n==0){
            return new int[]{-1,-1};
        }
        int lowb = lowerBound(nums, 0, n-1, target); //calculating the first occurance
        if(lowb==n || nums[lowb]!=target){
            return new int[]{-1,-1};
        }
        int uppb = upperBound(nums, 0, n-1, target); //calculating the first occurance
        return new int[]{lowb, uppb-1};// as upperbound will give i idx gretter value so we are returning idx-1

        //Approach 4: optimal TC: O(log2n) SC:O(1) using plan binary search
        int n = nums.length;
        int low = 0, high = n-1, first = -1, last = -1;

        while(low<=high){
            int mid = (low+high)/2;

            if(nums[mid]==target){
                first = mid;
                high = mid - 1; 
            }else if(nums[mid]<target){
                low = mid + 1;
            }else{
                high = mid - 1;
            }
        }
        
        if(first == -1){
            return new int[]{-1,-1};// if first occ is not there no need to find 2nd return -1, -1
        }
        low = 0;
        high = n-1;
        while(low<=high){
            int mid = (low+high)/2;

            if(nums[mid]==target){
                last = mid;
                low = mid + 1; 
            }else if(nums[mid]<target){
                low = mid + 1;
            }else{
                high = mid - 1;
            }
        }
      
       return new int[]{first, last};
    }
}
